内核 ----》操作系统的核心代码

并发 ： 同时处理多个请求，但是内核采用轮询时间片的方式逐个访问，某一时间点实际只处理一个任务。

比如 ：IO多路复用   协程   循环服务器。单线程

并行 ： 使用多个内核，同时执行多个任务

比如 ： 多进程  多线程


计算机原理   算法导论 
python程序员  python开发者  
掘金

线程  threading.Thread

进程和线程的同步互斥
Event   Lock

**********************************************
condition   条件变量 

创建条件变量对象
con =  threading.Condition()

con.acquire() : 对资源加锁，加锁后其他位置再加锁则阻塞
con.release() : 解锁

con.wait()  : wait函数只能在 加锁的状态下使用。 wait函数会先解锁（release），然后让线程处于等待通知的阻塞状态

con.notify()  : 发送通知，线程接收到通知后 结束wait阻塞，并且执行 acquire 加锁操作


threadpool 第三方模块

python线程之GIL 
（全局解释器锁）
python  ---》 支持多线程 ---》同步互斥 ---》加锁 ---》 超级锁 ----》 在同一时刻，解释器只能解释一个线程 -----》大量python库为了省事沿用了这种方法 ---》python 多线程效率低下

GIL 问题 ： 由于python的全局解释器锁造成python的多线程执行效率低下

解决方法 ： 
* 不使用线程，使用多进程
* 不使用c  c++ 做解释器   C#   java
* python线程适合高用时的IO操作，网路IO。不适合cpu密集型程序

GIL带来的影响
单进程
Line cpu: 6.7326600551605225
Line IO: 3.783463478088379

多线程
Thread cpu 6.855324745178223
Thread IO 4.32829213142395

多进程
Process cpu 3.297400951385498
Process IO 1.6371185779571533


设计模式

设计模式代表了一种最佳实践，是被开发人员长期总结，用来解决某一类问题的思路方法。这些方法保证了代码的效率也已于理解

单例模式    工厂模式    生产者模式。。。。

生产者消费者

控制数据资源数量
降低耦合度

多个消费者  消耗
多个生产者  生产 
均对仓库资源进行操作

总结：
1. 进程线程区别和联系
2. 同步互斥的意义和实现方法
3. 进程线程使用什么样的方式通信
4. 进程线程的特点和选择 
5. 简单的设计模式的理解  
6. 僵尸进程，进程状态， GIL等概念的理解


服务器模型

硬件服务器 ： 主机  集群
IBM   HP 

软件服务器 ： 网络服务器 在后端提供网络功能，逻辑处理，数据处理的程序或者架构等
例如  httpserver   django   flask

服务器架构 : c/s（客户端服务器）   
             b/s（浏览器服务器） 
						 服务器的组织形式

服务器追求 ： 处理速度快，数据更安全，并发量大

硬件 ： 更高配置，更多主机，集成，分布
软件 ： 程序占有更少的资源，更流畅的运行，处理更多的并发

基本的服务器模型

循环   并发模式    IO多路复用

循环 ： 单线程程序 ，循环接收连接或者请求，然后处理，处理后继续循环

缺点 ： 不能同时处理多个客户端的并行，不允许某个客户端长期占有服务器

结构比较简单，适用于UDP程序，要求处理请求可以很快完成

IO多路复用模型：通过同时监控多个IO 来达到IO并发的目的。

缺点 ： 也是单线程，不能够长期阻塞。不适合处理大量cpu占有高的程序

开销小，比较适合IO密集型的服务端程序，

并行服务器： 每有一个客户端连接请求，就创建一个新的进程或者线程处理客户端的请求，而主进程/主线程可以继续接受其他客户端的连接

缺点 ： 资源消耗比较大
客户端需要长期占有服务器的情况

基于fork的多进程并发

1.创建套接字  绑定   监听
2.接受客户端请求
3.创建子进程处理客户端请求，父进程继续准备接受新的客户端连接
4.客户端退出，销毁相应的子进程

TFTP文件服务器

文件的上传，下载，和服务端文件库的查看

服务端       客户端
             1.查看文件库中有哪些文件
             2.下载文件到本地

确定技术 

fork --- 多进程
tcp  socket

os.listdir(path)
获取该文件夹下所有文件，形成一个列表

os.path.isfile(path)
os.path.isdir(path)
判断一个文件是否是普通文件/文件夹

作业 ： 完成tftp文件服务器  get 和 put功能


